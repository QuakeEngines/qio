game
 - written from scratch with C++ class system
 - serverside Bullet physics for rigid bodies and cars
 - player movement is done by Bullet character controler
 - networked ragdoll system based on Doom3 ArticulatedFigures and Bullet physics
 - basic support for Quake3 / Doom3 weapon systems
 - FAKK/MoHAA .st (state machine) support for player movement and actions control
 - basic FAKK/MoHAA weapon system
 
cgame 
 - cleared up code
 - better communication with renderer
 - many usefull tools like cg_testModel, cg_testMaterial
 
renderer
 - written from scratch in C++
 - Quake3, RTCW, ET, FAKK, MoHAA bsp support with PVS and lightmapping
 - partial Quake2 and Quake BSP support
 - partial COD bsp support
 - BSP deluxemapping support
 - experimental Source Engine BSP support (HL2, Episodes, CS:Source) with displacements and static props 
 - Doom3/Quake4 .proc support with portal rendering system
 - ET:QW .procb support (without portals)
 - direct .map files loading (both Q3 and Doom3 versions)
 - openGL backend totally separated from frontend
 - experimental dynamic lighting with stencil shadows / shadow mapping
 - experimental DirectX 9 and 10 backends
 - VBO/IBO based (several times faster than Q3 renderer)
 - deltaRefEntities system
 - GLSL shaders support in backendGL
 - HLSL shaders support in backendDX9 (DirectX9 .fx files)
 - (not yet finished) per pixel realtime lighting rendering mode

modelLoader
 - written from scratch in C++
 - waveFront .obj support (with .mtl files)
 - .ASE static models support
 - usefull .mdpp (MoDelPreProcess) "scripts" system used to scale/rotate model after loading
 - Doom3 .md5mesh / .md5anim support
 - Wolfenstein Enemy Territory .mdm / .mdx support (skeletal models)
 - RTCW .mds support (skeletal models)
 - RTCW .mdc support (compressed md3)
 - .LWO static models support
 - .3DS static models support
 - Quake3 .md3 and Quake2 .md2 keyframed meshes support
 - Source Engine .smd support (with animation)
 - unfinished Half Life2 .mdl loader (without animations)
 - FAKK .tan support (similiar to md3)
 - FAKK .skb/.ska support (skeletal models)
 - basic MoHAA .skd loader (without animation)
 
materialSystem
 - written from scratch in C++
 - BASIC q3 shaders / Doom3 materials support
 - basic Source Engine .vmt support
 
declManager
 - Doom3 model decls support (.def files)
 - Doom3 entity decls support (.def files)
 - Doom3 Articulated Figures (.af files - ragdoll definitions) support
 - Doom3 particle emitters support
 - Quake3 three part players model support
 
gui
 - MoHAA / FAKK .urc support
 
common
 - interfaces system similiar to one in SourceEngine
 - engine core based on IOQuake3 code

network
 - zlib compression for larger packets
 
shared
 - many math, geometry and util C++ classes
 - autoCvar_c class for easier ConVars usage
 
editor
 - merged codebase with main engine; type "editor" in console to run (Doom3 style)
 - realtime materials preview (texmods, animmaps etc. are working in 3d view)

NewTools
 - dedicated material creator/editor with realtime material preview inside engine
 
q3map
 - custom QioBSP format that provides extra areaPortals data (similiar to one present in Doom3 proc files)
 - ???
 
 
 