Index: facebsp.c
===================================================================
--- facebsp.c	(revision 226)
+++ facebsp.c	(working copy)
@@ -76,6 +76,7 @@
 
 	hintsplit = qfalse;
 	// if it is crossing a 1k block boundary, force a split
+#if 0
 	for ( i = 0 ; i < 2 ; i++ ) {
 		dist = BLOCK_SIZE * ( floor( node->mins[i] / BLOCK_SIZE ) + 1 );	
 		if ( node->maxs[i] > dist ) {
@@ -85,6 +86,7 @@
 			return planenum;
 		}
 	}
+#endif
 
 	// pick one of the face planes
 	bestValue = -99999;
@@ -104,7 +106,7 @@
 		front = 0;
 		back = 0;
 		for ( check = list ; check ; check = check->next ) {
-			if ( check->planenum == split->planenum ) {
+			if ( check->planenum == split->planenum && check->priority == split->priority ) {
 				facing++;
 				check->checked = qtrue;	// won't need to test this plane again
 				continue;
@@ -331,6 +333,14 @@
 			if (s->surfaceFlags & SURF_HINT) {
 				//f->priority = HINT_PRIORITY;
 				f->hint = qtrue;
+			}	
+			if(s->contents & CONTENTS_AREAPORTAL) {
+				f->priority = 99999;
+			} else {
+				// ignore non-areaPortal sides of areaPortal brushes
+				//if(b->contents & CONTENTS_AREAPORTAL) {
+				//	continue;
+				//}
 			}
 			flist = f;
 		}
@@ -369,6 +379,14 @@
 			if (s->surfaceFlags & SURF_HINT) {
 				//f->priority = HINT_PRIORITY;
 				f->hint = qtrue;
+			}	
+			if(s->contents & CONTENTS_AREAPORTAL) {
+				f->priority = 99999;
+			} else {
+				// ignore non-areaPortal sides of areaPortal brushes
+				//if(b->contents & CONTENTS_AREAPORTAL) {
+				//	continue;
+				//}
 			}
 			flist = f;
 		}
Index: map.c
===================================================================
--- map.c	(revision 226)
+++ map.c	(working copy)
@@ -307,6 +307,7 @@
 		c2 = s->contents;
 		if (c2 != contents) {
 			mixed = qtrue;
+			contents |= s->contents;
 		}
 
 		allFlags |= s->surfaceFlags;
@@ -343,7 +344,7 @@
 		b->detail = qfalse;
 	}
 
-	if ( contents & CONTENTS_TRANSLUCENT ) {
+	if ( (contents & CONTENTS_TRANSLUCENT) || (contents & CONTENTS_AREAPORTAL)) {
 		b->opaque = qfalse;
 	} else {
 		b->opaque = qtrue;
Index: portals.c
===================================================================
--- portals.c	(revision 226)
+++ portals.c	(working copy)
@@ -708,6 +708,21 @@
 	}
 }
 
+//qboolean Node_HasAnyPassablePortal(node_t *node) {
+//	portal_t *p;
+//	int s;
+//
+//	for (p=node->portals ; p ; p = p->next[s])
+//	{
+//		s = (p->nodes[1] == node);
+//
+//		if ( !Portal_Passable(p) )
+//			continue;
+//
+//		return qtrue;
+//	}
+//	return qfalse;
+//}
 
 /*
 =============
@@ -735,6 +750,11 @@
 	if (node->area != -1)
 		return;		// allready got it
 
+	// if node is cut off from world...
+	// FIXME: this should be fixed before FindAreas_r
+	//if(Node_HasAnyPassablePortal(node) == qfalse)
+	//	return; // dont create "ghost" areas
+
 	FloodAreas_r (node);
 	c_areas++;
 }
Index: q3mapcommon/bspfile.c
===================================================================
--- q3mapcommon/bspfile.c	(revision 226)
+++ q3mapcommon/bspfile.c	(working copy)
@@ -80,6 +80,12 @@
 int			numFogs;
 dfog_t		dfogs[MAX_MAP_FOGS];
 
+int				numAreaPortals;
+dareaPortal_t	dareaPortals[MAX_MAP_AREAPORTALS];
+
+int			numDPoints;
+vec3_t		dpoints[MAX_MAP_POINTS];
+
 //=============================================================================
 
 /*
@@ -232,6 +238,8 @@
 
 	numGridPoints = CopyLump( header, LUMP_LIGHTGRID, gridData, 8 );
 
+	numAreaPortals = CopyLump( header, LUMP_AREAPORTALS, dareaPortals, sizeof(dareaPortal_t) );
+	numDPoints = CopyLump( header, LUMP_POINTS, dpoints, sizeof(vec3_t) );
 
 	free( header );		// everything has been copied out
 		
@@ -296,6 +304,8 @@
 	AddLump( bspfile, header, LUMP_ENTITIES, dentdata, entdatasize );
 	AddLump( bspfile, header, LUMP_FOGS, dfogs, numFogs * sizeof(dfog_t) );
 	AddLump( bspfile, header, LUMP_DRAWINDEXES, drawIndexes, numDrawIndexes * sizeof(drawIndexes[0]) );
+	AddLump( bspfile, header, LUMP_POINTS, dpoints, numDPoints * sizeof(vec3_t) );
+	AddLump( bspfile, header, LUMP_AREAPORTALS, dareaPortals, numAreaPortals * sizeof(dareaPortal_t) );
 	
 	fseek (bspfile, 0, SEEK_SET);
 	SafeWrite (bspfile, header, sizeof(dheader_t));
Index: q3mapcommon/bspfile.h
===================================================================
--- q3mapcommon/bspfile.h	(revision 226)
+++ q3mapcommon/bspfile.h	(working copy)
@@ -78,6 +78,12 @@
 extern	int			numFogs;
 extern	dfog_t		dfogs[MAX_MAP_FOGS];
 
+extern	int				numAreaPortals;
+extern	dareaPortal_t	dareaPortals[MAX_MAP_AREAPORTALS];
+
+extern	int			numDPoints;
+extern	vec3_t		dpoints[MAX_MAP_POINTS];
+
 void	LoadBSPFile( const char *filename );
 void	WriteBSPFile( const char *filename );
 void	PrintBSPFileSizes( void );
Index: q3mapcommon/qfiles.h
===================================================================
--- q3mapcommon/qfiles.h	(revision 226)
+++ q3mapcommon/qfiles.h	(working copy)
@@ -304,18 +304,20 @@
 /*
 ==============================================================================
 
-  .BSP file format
+  Qio internal .BSP file format
 
 ==============================================================================
 */
 
+#define BSP_IDENT	(('!'<<24)+('O'<<16)+('I'<<8)+'Q')
+		// little-endian "QIO!"
 
-#define BSP_IDENT	(('P'<<24)+('S'<<16)+('B'<<8)+'I')
-		// little-endian "IBSP"
+// Vodin: Qio bsp version
+#define BSP_VERSION			1
 
-#define BSP_VERSION			46
+// Revision log:
+// rev 1: added POINTS lump and AREAPORTALS lump
 
-
 // there shouldn't be any problem with increasing these values at the
 // expense of more memory allocation in the utilities
 #define	MAX_MAP_MODELS		0x400
@@ -325,6 +327,10 @@
 #define	MAX_MAP_SHADERS		0x400
 
 #define	MAX_MAP_AREAS		0x100	// MAX_MAP_AREA_BYTES in q_shared must match!
+// assume three portals per area (there can be much more)
+#define MAX_MAP_AREAPORTALS MAX_MAP_AREAS*3
+// assume 4 points per portal
+#define MAX_MAP_POINTS		MAX_MAP_AREAPORTALS*4
 #define	MAX_MAP_FOGS		0x100
 #define	MAX_MAP_PLANES		0x20000
 #define	MAX_MAP_NODES		0x20000
@@ -381,7 +387,10 @@
 #define	LUMP_LIGHTMAPS		14
 #define	LUMP_LIGHTGRID		15
 #define	LUMP_VISIBILITY		16
-#define	HEADER_LUMPS		17
+// Vodin: added for Qio .bsp version 1
+#define	LUMP_POINTS			17
+#define	LUMP_AREAPORTALS	18
+#define	HEADER_LUMPS		19
 
 typedef struct {
 	int			ident;
@@ -485,5 +494,13 @@
 	int			patchHeight;
 } dsurface_t;
 
+// Vodin: areaPortal struct for QioBSP version 1
+typedef struct {
+	vec3_t bounds[2];
+	int areas[2];
+	int planeNum;
+	int firstPoint;
+	int numPoints;
+} dareaPortal_t;
 
 #endif
Index: shaders.c
===================================================================
--- shaders.c	(revision 234)
+++ shaders.c	(working copy)
@@ -317,6 +317,13 @@
 	si = AllocShaderInfo();
 	strcpy( si->shader, shader );
 
+	// build in materials
+	// (in case that .shader/.mtr files are missing)
+	if(!stricmp(shader,"textures/common/areaportal")) {
+		si->contents = CONTENTS_AREAPORTAL;
+	} else if(!stricmp(shader,"textures/common/caulk")) {
+		si->surfaceFlags |= SURF_NODRAW;
+	}
 	LoadShaderImage( si );
 
 	return si;
Index: surface.c
===================================================================
--- surface.c	(revision 226)
+++ surface.c	(working copy)
@@ -407,6 +407,10 @@
 			if ( si->surfaceFlags & SURF_NODRAW ) {
 				continue;
 			}
+			// don't create faces for areaportals
+			if ( si->contents & CONTENTS_AREAPORTAL ) {
+				continue;
+			}
 
 			// always use the original quad winding for auto sprites
 			if ( side->shaderInfo->autosprite ) {
Index: writebsp.c
===================================================================
--- writebsp.c	(revision 226)
+++ writebsp.c	(working copy)
@@ -321,6 +321,12 @@
 		if ( numbrushes == MAX_MAP_BRUSHES ) {
 			Error( "MAX_MAP_BRUSHES" );
 		}
+		// never write areaPortal brushes to bsp;
+		// they are always non-solid
+		if(b->contents & CONTENTS_AREAPORTAL) {
+			continue;
+		}
+
 		b->outputNumber = numbrushes;
 		db = &dbrushes[numbrushes];
 		numbrushes++;
@@ -395,9 +401,134 @@
 	EmitBrushes( e->brushes );
 }
 
+void EmitPortals_r(node_t * node, node_t *headnode)
+{
+	bspbrush_t        *b;
+	int i,s;
+	portal_t *p;
+	portal_t *ap;
+	winding_t *pw;
+	vec3_t checkPoint;
+	plane_t *apPlane;
 
+	if(node->planenum != PLANENUM_LEAF)
+	{
+		EmitPortals_r(node->children[0],headnode);
+		EmitPortals_r(node->children[1],headnode);
+		return;
+	}
 
+	if(node->opaque)
+		return;
 
+	if(node->cluster != -1)
+		if(node->area == -1)
+			printf("EmitPortals_r: cluster %d has area set to -1\n", node->cluster);
+	if(node->areaportal)
+	{
+		b = node->brushlist->original;
+
+		// check if the areaportal touches two areas
+		if(b->portalareas[0] == -1 || b->portalareas[1] == -1) {
+			printf("EmitPortals_r: areaportal brush %i doesn't touch two areas\n", b->brushnum);
+			return;
+		}
+
+#if 0
+		// it doesnt work, the ap winding does not match with real portal winding
+		ap = 0;
+		for(p = node->portals; p; p = p->next[s]) {
+			s = (p->nodes[1] == node);
+
+			if(p->onnode == node->parent) {
+				if(ap) {
+					// this should never happen,
+					// there cant be two different portals on single node?
+					printf("Areaportal already found!\n");
+				}
+				ap = p;
+			}
+		}
+		if(ap) {
+			pw = ap->winding;
+			apPlane = &ap->plane;
+#else
+		pw = 0;
+		apPlane = 0;
+		// let's assume that areaPortal brushes has only one areaPortal side
+		for(i = 0; i < b->numsides; i++) {
+			side_t *s = &b->sides[i];
+			if((s->contents & CONTENTS_AREAPORTAL) == qfalse) {
+				continue;
+			}
+			pw = s->winding;
+			apPlane = &mapplanes[s->planenum];
+			if(pw == 0) {
+				pw = s->visibleHull;
+			}
+		}
+		{
+#endif
+			if(pw == 0) {
+				printf("EmitPortals_r: areaPortal %i has null winding\n",0);
+				return;
+			}
+			if(numDPoints + pw->numpoints >= MAX_MAP_POINTS) {
+				Error("MAX_MAP_POINTS (increase this macro and recompile or remove some areaportals\n");
+				return;
+			}
+			if(numAreaPortals + 1 >= MAX_MAP_AREAPORTALS) {
+				Error("MAX_MAP_AREAPORTALS (increase this macro and recompile or remove some areaportals\n");
+				return;
+			}
+			printf("EmitPortals_r: emiting portal %i\n",0);
+			ClearBounds(dareaPortals[numAreaPortals].bounds[1],dareaPortals[numAreaPortals].bounds[0]);
+			for(i = 0; i < pw->numpoints; i++) {
+				VectorCopy(pw->p[i],dpoints[numDPoints+i]);
+				AddPointToBounds(pw->p[i],dareaPortals[numAreaPortals].bounds[1],dareaPortals[numAreaPortals].bounds[0]);
+			}		
+			// extend areaPortal bounds a little, 
+			// otherwise there might be some diseapperaing 
+			// areas while camera eye is inside portal winding
+			for(i = 0; i < 3; i++) {
+				const float pEps = 1.f;
+				dareaPortals[numAreaPortals].bounds[0][i] += pEps;
+				dareaPortals[numAreaPortals].bounds[1][i] -= pEps;
+			}
+#if 1
+			WindingCenter(pw,checkPoint);
+			VectorMA(checkPoint,1,apPlane->normal,checkPoint);
+			node = NodeForPoint(headnode,checkPoint);
+#else
+			
+#endif
+			if(node->area == b->portalareas[0]){
+				dareaPortals[numAreaPortals].areas[0] = b->portalareas[0];
+				dareaPortals[numAreaPortals].areas[1] = b->portalareas[1];
+			} else if(node->area = b->portalareas[1]) {
+				dareaPortals[numAreaPortals].areas[0] = b->portalareas[1];
+				dareaPortals[numAreaPortals].areas[1] = b->portalareas[0];
+			} else {
+				Error("Node area mismatch\n");
+			}
+			dareaPortals[numAreaPortals].planeNum = FindFloatPlane(apPlane->normal,apPlane->dist);
+			dareaPortals[numAreaPortals].firstPoint = numDPoints;
+			dareaPortals[numAreaPortals].numPoints = pw->numpoints;
+			numAreaPortals ++;
+			numDPoints += pw->numpoints;
+			return;
+		}
+		printf("EmitPortals: no matching portal found!\n");
+	}
+}
+
+static void EmitPortals (node_t *headnode) {
+	if (nummodels)
+		return;		// only for world model
+
+	EmitPortals_r(headnode,headnode);
+}
+
 /*
 ==================
 EndModel
@@ -410,6 +541,9 @@
 
 	mod = &dmodels[nummodels];
 	EmitDrawNode_r (headnode);
+	// Vodin: areaPortal points, areas and planes (Doom3 style)
+	EmitPortals(headnode);
+
 	mod->numSurfaces = numDrawSurfaces - mod->firstSurface;
 	mod->numBrushes = numbrushes - mod->firstBrush;
 
